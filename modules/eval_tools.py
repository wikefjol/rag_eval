import os
from datetime import datetime

from giskard.rag import QATestset

def display_evaluation_results(report):


    """
    Display the evaluation results in a readable format and save the report.

    Args:
        report (RAGReport): The report generated by the evaluation.
    """
    print("\n=== RAG Evaluation Results ===")

    # Overall Summary
    print(f"\nOverall Correctness: {report.correctness * 100:.2f}%")
    print(f"Total Test Cases: {len(report._testset)}")

    # Component Scores
    print("\n--- RAG Component Scores ---")
    component_scores = report.component_scores()
    for component, score in component_scores["score"].items():
        print(f"{component}: {score * 100:.2f}%")

    # Correctness by Question Type
    print("\n--- Correctness by Question Type ---")
    question_type_correctness = report.correctness_by_question_type()
    for question_type, row in question_type_correctness.iterrows():
        print(f"{question_type}: {row['correctness'] * 100:.2f}%")

    # Correctness by Topic
    print("\n--- Correctness by Topic ---")
    topic_correctness = report.correctness_by_topic()
    for topic, row in topic_correctness.iterrows():
        print(f"{topic}: {row['correctness'] * 100:.2f}%")

    # Failures
    print("\n--- Problematic Cases ---")
    failures = report.get_failures()
    if not failures.empty:
        for idx, row in failures.iterrows():
            print(f"Question: {row['question']}")
            print(f"Ground Truth: {row['reference_answer']}")
            print(f"Model Response: {row['agent_answer']}")
            print(f"Reason: {row['correctness_reason']}")
            print("-" * 40)
    else:
        print("No failures detected.")

    # Save Report to a Unique Subfolder
    base_dir = "eval_results"
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    llm_name = report._testset.get_metadata_values("llm")[0] if "llm" in report._testset.to_pandas().columns else "unknown_llm"
    emb_name = report._testset.get_metadata_values("embedding")[0] if "embedding" in report._testset.to_pandas().columns else "unknown_embedding"
    folder_name = f"{llm_name}_{emb_name}_{timestamp}"
    save_path = os.path.join(base_dir, folder_name)

    os.makedirs(save_path, exist_ok=True)
    report.save(save_path)
    print(f"\nReport saved at: {save_path}")


def load_testset(testset_path):
    """
    Load a Giskard QATestset from the specified file path.

    Args:
        testset_path (str): Path to the JSONL file containing the testset.

    Returns:
        QATestset: The loaded testset object.

    Raises:
        FileNotFoundError: If the specified testset file does not exist.
        ValueError: If the file cannot be loaded as a valid QATestset.
    """
    try:
        print(f"Loading testset from: {testset_path}")
        testset = QATestset.load(testset_path)
        print(f"Testset successfully loaded. Number of questions: {len(testset)}")
        return testset
    except FileNotFoundError:
        raise FileNotFoundError(f"The testset file at {testset_path} does not exist.")
    except Exception as e:
        raise ValueError(f"Failed to load the testset from {testset_path}. Error: {str(e)}")